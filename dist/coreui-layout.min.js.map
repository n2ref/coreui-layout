{"version":3,"file":"coreui-layout.min.js","sources":["coreui-layout.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.CoreUI = global.CoreUI || {}, global.CoreUI.layout = factory()));\n})(this, (function () { 'use strict';\n\n  function _toPrimitive(t, r) {\n    if (\"object\" != typeof t || !t) return t;\n    var e = t[Symbol.toPrimitive];\n    if (void 0 !== e) {\n      var i = e.call(t, r || \"default\");\n      if (\"object\" != typeof i) return i;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (\"string\" === r ? String : Number)(t);\n  }\n  function _toPropertyKey(t) {\n    var i = _toPrimitive(t, \"string\");\n    return \"symbol\" == typeof i ? i : i + \"\";\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  }\n\n  (function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n      module.exports = f();\n    } else if (typeof define === \"function\" && define.amd) {\n      define([], f);\n    } else {\n      var g;\n      if (typeof window !== \"undefined\") {\n        g = window;\n      } else if (typeof global !== \"undefined\") {\n        g = global;\n      } else if (typeof self !== \"undefined\") {\n        g = self;\n      } else {\n        g = this;\n      }\n      g.ejs = f();\n    }\n  })(function () {\n    return function () {\n      function r(e, n, t) {\n        function o(i, f) {\n          if (!n[i]) {\n            if (!e[i]) {\n              var c = \"function\" == typeof require && require;\n              if (!f && c) return c(i, !0);\n              if (u) return u(i, !0);\n              var a = new Error(\"Cannot find module '\" + i + \"'\");\n              throw a.code = \"MODULE_NOT_FOUND\", a;\n            }\n            var p = n[i] = {\n              exports: {}\n            };\n            e[i][0].call(p.exports, function (r) {\n              var n = e[i][1][r];\n              return o(n || r);\n            }, p, p.exports, r, e, n, t);\n          }\n          return n[i].exports;\n        }\n        for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);\n        return o;\n      }\n      return r;\n    }()({\n      1: [function (require, module, exports) {\n\n        var fs = require(\"fs\");\n        var path = require(\"path\");\n        var utils = require(\"./utils\");\n        var scopeOptionWarned = false;\n        var _VERSION_STRING = require(\"../package.json\").version;\n        var _DEFAULT_OPEN_DELIMITER = \"<\";\n        var _DEFAULT_CLOSE_DELIMITER = \">\";\n        var _DEFAULT_DELIMITER = \"%\";\n        var _DEFAULT_LOCALS_NAME = \"locals\";\n        var _NAME = \"ejs\";\n        var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n        var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n        var _BOM = /^\\uFEFF/;\n        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n        exports.cache = utils.cache;\n        exports.fileLoader = fs.readFileSync;\n        exports.localsName = _DEFAULT_LOCALS_NAME;\n        exports.promiseImpl = new Function(\"return this;\")().Promise;\n        exports.resolveInclude = function (name, filename, isDir) {\n          var dirname = path.dirname;\n          var extname = path.extname;\n          var resolve = path.resolve;\n          var includePath = resolve(isDir ? filename : dirname(filename), name);\n          var ext = extname(name);\n          if (!ext) {\n            includePath += \".ejs\";\n          }\n          return includePath;\n        };\n        function resolvePaths(name, paths) {\n          var filePath;\n          if (paths.some(function (v) {\n            filePath = exports.resolveInclude(name, v, true);\n            return fs.existsSync(filePath);\n          })) {\n            return filePath;\n          }\n        }\n        function getIncludePath(path, options) {\n          var includePath;\n          var filePath;\n          var views = options.views;\n          var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n          if (match && match.length) {\n            path = path.replace(/^\\/*/, \"\");\n            if (Array.isArray(options.root)) {\n              includePath = resolvePaths(path, options.root);\n            } else {\n              includePath = exports.resolveInclude(path, options.root || \"/\", true);\n            }\n          } else {\n            if (options.filename) {\n              filePath = exports.resolveInclude(path, options.filename);\n              if (fs.existsSync(filePath)) {\n                includePath = filePath;\n              }\n            }\n            if (!includePath && Array.isArray(views)) {\n              includePath = resolvePaths(path, views);\n            }\n            if (!includePath && typeof options.includer !== \"function\") {\n              throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n            }\n          }\n          return includePath;\n        }\n        function handleCache(options, template) {\n          var func;\n          var filename = options.filename;\n          var hasTemplate = arguments.length > 1;\n          if (options.cache) {\n            if (!filename) {\n              throw new Error(\"cache option requires a filename\");\n            }\n            func = exports.cache.get(filename);\n            if (func) {\n              return func;\n            }\n            if (!hasTemplate) {\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n          } else if (!hasTemplate) {\n            if (!filename) {\n              throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n            }\n            template = fileLoader(filename).toString().replace(_BOM, \"\");\n          }\n          func = exports.compile(template, options);\n          if (options.cache) {\n            exports.cache.set(filename, func);\n          }\n          return func;\n        }\n        function tryHandleCache(options, data, cb) {\n          var result;\n          if (!cb) {\n            if (typeof exports.promiseImpl == \"function\") {\n              return new exports.promiseImpl(function (resolve, reject) {\n                try {\n                  result = handleCache(options)(data);\n                  resolve(result);\n                } catch (err) {\n                  reject(err);\n                }\n              });\n            } else {\n              throw new Error(\"Please provide a callback function\");\n            }\n          } else {\n            try {\n              result = handleCache(options)(data);\n            } catch (err) {\n              return cb(err);\n            }\n            cb(null, result);\n          }\n        }\n        function fileLoader(filePath) {\n          return exports.fileLoader(filePath);\n        }\n        function includeFile(path, options) {\n          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n          opts.filename = getIncludePath(path, opts);\n          if (typeof options.includer === \"function\") {\n            var includerResult = options.includer(path, opts.filename);\n            if (includerResult) {\n              if (includerResult.filename) {\n                opts.filename = includerResult.filename;\n              }\n              if (includerResult.template) {\n                return handleCache(opts, includerResult.template);\n              }\n            }\n          }\n          return handleCache(opts);\n        }\n        function rethrow(err, str, flnm, lineno, esc) {\n          var lines = str.split(\"\\n\");\n          var start = Math.max(lineno - 3, 0);\n          var end = Math.min(lines.length, lineno + 3);\n          var filename = esc(flnm);\n          var context = lines.slice(start, end).map(function (line, i) {\n            var curr = i + start + 1;\n            return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n          }).join(\"\\n\");\n          err.path = filename;\n          err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n          throw err;\n        }\n        function stripSemi(str) {\n          return str.replace(/;(\\s*$)/, \"$1\");\n        }\n        exports.compile = function compile(template, opts) {\n          var templ;\n          if (opts && opts.scope) {\n            if (!scopeOptionWarned) {\n              console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n              scopeOptionWarned = true;\n            }\n            if (!opts.context) {\n              opts.context = opts.scope;\n            }\n            delete opts.scope;\n          }\n          templ = new Template(template, opts);\n          return templ.compile();\n        };\n        exports.render = function (template, d, o) {\n          var data = d || utils.createNullProtoObjWherePossible();\n          var opts = o || utils.createNullProtoObjWherePossible();\n          if (arguments.length == 2) {\n            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n          }\n          return handleCache(opts, template)(data);\n        };\n        exports.renderFile = function () {\n          var args = Array.prototype.slice.call(arguments);\n          var filename = args.shift();\n          var cb;\n          var opts = {\n            filename: filename\n          };\n          var data;\n          var viewOpts;\n          if (typeof arguments[arguments.length - 1] == \"function\") {\n            cb = args.pop();\n          }\n          if (args.length) {\n            data = args.shift();\n            if (args.length) {\n              utils.shallowCopy(opts, args.pop());\n            } else {\n              if (data.settings) {\n                if (data.settings.views) {\n                  opts.views = data.settings.views;\n                }\n                if (data.settings[\"view cache\"]) {\n                  opts.cache = true;\n                }\n                viewOpts = data.settings[\"view options\"];\n                if (viewOpts) {\n                  utils.shallowCopy(opts, viewOpts);\n                }\n              }\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n            }\n            opts.filename = filename;\n          } else {\n            data = utils.createNullProtoObjWherePossible();\n          }\n          return tryHandleCache(opts, data, cb);\n        };\n        exports.Template = Template;\n        exports.clearCache = function () {\n          exports.cache.reset();\n        };\n        function Template(text, optsParam) {\n          var opts = utils.hasOwnOnlyObject(optsParam);\n          var options = utils.createNullProtoObjWherePossible();\n          this.templateText = text;\n          this.mode = null;\n          this.truncate = false;\n          this.currentLine = 1;\n          this.source = \"\";\n          options.client = opts.client || false;\n          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n          options.compileDebug = opts.compileDebug !== false;\n          options.debug = !!opts.debug;\n          options.filename = opts.filename;\n          options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n          options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n          options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n          options.strict = opts.strict || false;\n          options.context = opts.context;\n          options.cache = opts.cache || false;\n          options.rmWhitespace = opts.rmWhitespace;\n          options.root = opts.root;\n          options.includer = opts.includer;\n          options.outputFunctionName = opts.outputFunctionName;\n          options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n          options.views = opts.views;\n          options.async = opts.async;\n          options.destructuredLocals = opts.destructuredLocals;\n          options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n          if (options.strict) {\n            options._with = false;\n          } else {\n            options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n          }\n          this.opts = options;\n          this.regex = this.createRegex();\n        }\n        Template.modes = {\n          EVAL: \"eval\",\n          ESCAPED: \"escaped\",\n          RAW: \"raw\",\n          COMMENT: \"comment\",\n          LITERAL: \"literal\"\n        };\n        Template.prototype = {\n          createRegex: function () {\n            var str = _REGEX_STRING;\n            var delim = utils.escapeRegExpChars(this.opts.delimiter);\n            var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n            var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n            str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n            return new RegExp(str);\n          },\n          compile: function () {\n            var src;\n            var fn;\n            var opts = this.opts;\n            var prepended = \"\";\n            var appended = \"\";\n            var escapeFn = opts.escapeFunction;\n            var ctor;\n            var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n            if (!this.source) {\n              this.generateSource();\n              prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n              if (opts.outputFunctionName) {\n                if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                  throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                }\n                prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n              }\n              if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                throw new Error(\"localsName is not a valid JS identifier.\");\n              }\n              if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                  var name = opts.destructuredLocals[i];\n                  if (!_JS_IDENTIFIER.test(name)) {\n                    throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                  }\n                  if (i > 0) {\n                    destructuring += \",\\n  \";\n                  }\n                  destructuring += name + \" = __locals.\" + name;\n                }\n                prepended += destructuring + \";\\n\";\n              }\n              if (opts._with !== false) {\n                prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                appended += \"  }\" + \"\\n\";\n              }\n              appended += \"  return __output;\" + \"\\n\";\n              this.source = prepended + this.source + appended;\n            }\n            if (opts.compileDebug) {\n              src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n            } else {\n              src = this.source;\n            }\n            if (opts.client) {\n              src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n              if (opts.compileDebug) {\n                src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n              }\n            }\n            if (opts.strict) {\n              src = '\"use strict\";\\n' + src;\n            }\n            if (opts.debug) {\n              console.log(src);\n            }\n            if (opts.compileDebug && opts.filename) {\n              src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n            }\n            try {\n              if (opts.async) {\n                try {\n                  ctor = new Function(\"return (async function(){}).constructor;\")();\n                } catch (e) {\n                  if (e instanceof SyntaxError) {\n                    throw new Error(\"This environment does not support async/await\");\n                  } else {\n                    throw e;\n                  }\n                }\n              } else {\n                ctor = Function;\n              }\n              fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                if (opts.filename) {\n                  e.message += \" in \" + opts.filename;\n                }\n                e.message += \" while compiling ejs\\n\\n\";\n                e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                if (!opts.async) {\n                  e.message += \"\\n\";\n                  e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                }\n              }\n              throw e;\n            }\n            var returnedFn = opts.client ? fn : function anonymous(data) {\n              var include = function (path, includeData) {\n                var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                if (includeData) {\n                  d = utils.shallowCopy(d, includeData);\n                }\n                return includeFile(path, opts)(d);\n              };\n              return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n            };\n            if (opts.filename && typeof Object.defineProperty === \"function\") {\n              var filename = opts.filename;\n              var basename = path.basename(filename, path.extname(filename));\n              try {\n                Object.defineProperty(returnedFn, \"name\", {\n                  value: basename,\n                  writable: false,\n                  enumerable: false,\n                  configurable: true\n                });\n              } catch (e) {}\n            }\n            return returnedFn;\n          },\n          generateSource: function () {\n            var opts = this.opts;\n            if (opts.rmWhitespace) {\n              this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n            }\n            this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n            var self = this;\n            var matches = this.parseTemplateText();\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            if (matches && matches.length) {\n              matches.forEach(function (line, index) {\n                var closing;\n                if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                  closing = matches[index + 2];\n                  if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                    throw new Error('Could not find matching close tag for \"' + line + '\".');\n                  }\n                }\n                self.scanLine(line);\n              });\n            }\n          },\n          parseTemplateText: function () {\n            var str = this.templateText;\n            var pat = this.regex;\n            var result = pat.exec(str);\n            var arr = [];\n            var firstPos;\n            while (result) {\n              firstPos = result.index;\n              if (firstPos !== 0) {\n                arr.push(str.substring(0, firstPos));\n                str = str.slice(firstPos);\n              }\n              arr.push(result[0]);\n              str = str.slice(result[0].length);\n              result = pat.exec(str);\n            }\n            if (str) {\n              arr.push(str);\n            }\n            return arr;\n          },\n          _addOutput: function (line) {\n            if (this.truncate) {\n              line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n              this.truncate = false;\n            }\n            if (!line) {\n              return line;\n            }\n            line = line.replace(/\\\\/g, \"\\\\\\\\\");\n            line = line.replace(/\\n/g, \"\\\\n\");\n            line = line.replace(/\\r/g, \"\\\\r\");\n            line = line.replace(/\"/g, '\\\\\"');\n            this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n          },\n          scanLine: function (line) {\n            var self = this;\n            var d = this.opts.delimiter;\n            var o = this.opts.openDelimiter;\n            var c = this.opts.closeDelimiter;\n            var newLineCount = 0;\n            newLineCount = line.split(\"\\n\").length - 1;\n            switch (line) {\n              case o + d:\n              case o + d + \"_\":\n                this.mode = Template.modes.EVAL;\n                break;\n              case o + d + \"=\":\n                this.mode = Template.modes.ESCAPED;\n                break;\n              case o + d + \"-\":\n                this.mode = Template.modes.RAW;\n                break;\n              case o + d + \"#\":\n                this.mode = Template.modes.COMMENT;\n                break;\n              case o + d + d:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                break;\n              case d + d + c:\n                this.mode = Template.modes.LITERAL;\n                this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                break;\n              case d + c:\n              case \"-\" + d + c:\n              case \"_\" + d + c:\n                if (this.mode == Template.modes.LITERAL) {\n                  this._addOutput(line);\n                }\n                this.mode = null;\n                this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                break;\n              default:\n                if (this.mode) {\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                    case Template.modes.ESCAPED:\n                    case Template.modes.RAW:\n                      if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                        line += \"\\n\";\n                      }\n                  }\n                  switch (this.mode) {\n                    case Template.modes.EVAL:\n                      this.source += \"    ; \" + line + \"\\n\";\n                      break;\n                    case Template.modes.ESCAPED:\n                      this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                      break;\n                    case Template.modes.RAW:\n                      this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                      break;\n                    case Template.modes.COMMENT:\n                      break;\n                    case Template.modes.LITERAL:\n                      this._addOutput(line);\n                      break;\n                  }\n                } else {\n                  this._addOutput(line);\n                }\n            }\n            if (self.opts.compileDebug && newLineCount) {\n              this.currentLine += newLineCount;\n              this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n            }\n          }\n        };\n        exports.escapeXML = utils.escapeXML;\n        exports.__express = exports.renderFile;\n        exports.VERSION = _VERSION_STRING;\n        exports.name = _NAME;\n        if (typeof window != \"undefined\") {\n          window.ejs = exports;\n        }\n      }, {\n        \"../package.json\": 6,\n        \"./utils\": 2,\n        fs: 3,\n        path: 4\n      }],\n      2: [function (require, module, exports) {\n\n        var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var hasOwn = function (obj, key) {\n          return hasOwnProperty.apply(obj, [key]);\n        };\n        exports.escapeRegExpChars = function (string) {\n          if (!string) {\n            return \"\";\n          }\n          return String(string).replace(regExpChars, \"\\\\$&\");\n        };\n        var _ENCODE_HTML_RULES = {\n          \"&\": \"&amp;\",\n          \"<\": \"&lt;\",\n          \">\": \"&gt;\",\n          '\"': \"&#34;\",\n          \"'\": \"&#39;\"\n        };\n        var _MATCH_HTML = /[&<>'\"]/g;\n        function encode_char(c) {\n          return _ENCODE_HTML_RULES[c] || c;\n        }\n        var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n        exports.escapeXML = function (markup) {\n          return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n        };\n        function escapeXMLToString() {\n          return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n        }\n        try {\n          if (typeof Object.defineProperty === \"function\") {\n            Object.defineProperty(exports.escapeXML, \"toString\", {\n              value: escapeXMLToString\n            });\n          } else {\n            exports.escapeXML.toString = escapeXMLToString;\n          }\n        } catch (err) {\n          console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n        }\n        exports.shallowCopy = function (to, from) {\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var p in from) {\n              if (!hasOwn(from, p)) {\n                continue;\n              }\n              if (p === \"__proto__\" || p === \"constructor\") {\n                continue;\n              }\n              to[p] = from[p];\n            }\n          }\n          return to;\n        };\n        exports.shallowCopyFromList = function (to, from, list) {\n          list = list || [];\n          from = from || {};\n          if (to !== null && to !== undefined) {\n            for (var i = 0; i < list.length; i++) {\n              var p = list[i];\n              if (typeof from[p] != \"undefined\") {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n          }\n          return to;\n        };\n        exports.cache = {\n          _data: {},\n          set: function (key, val) {\n            this._data[key] = val;\n          },\n          get: function (key) {\n            return this._data[key];\n          },\n          remove: function (key) {\n            delete this._data[key];\n          },\n          reset: function () {\n            this._data = {};\n          }\n        };\n        exports.hyphenToCamel = function (str) {\n          return str.replace(/-[a-z]/g, function (match) {\n            return match[1].toUpperCase();\n          });\n        };\n        exports.createNullProtoObjWherePossible = function () {\n          if (typeof Object.create == \"function\") {\n            return function () {\n              return Object.create(null);\n            };\n          }\n          if (!({\n            __proto__: null\n          } instanceof Object)) {\n            return function () {\n              return {\n                __proto__: null\n              };\n            };\n          }\n          return function () {\n            return {};\n          };\n        }();\n        exports.hasOwnOnlyObject = function (obj) {\n          var o = exports.createNullProtoObjWherePossible();\n          for (var p in obj) {\n            if (hasOwn(obj, p)) {\n              o[p] = obj[p];\n            }\n          }\n          return o;\n        };\n      }, {}],\n      3: [function (require, module, exports) {}, {}],\n      4: [function (require, module, exports) {\n        (function (process) {\n          function normalizeArray(parts, allowAboveRoot) {\n            var up = 0;\n            for (var i = parts.length - 1; i >= 0; i--) {\n              var last = parts[i];\n              if (last === \".\") {\n                parts.splice(i, 1);\n              } else if (last === \"..\") {\n                parts.splice(i, 1);\n                up++;\n              } else if (up) {\n                parts.splice(i, 1);\n                up--;\n              }\n            }\n            if (allowAboveRoot) {\n              for (; up--; up) {\n                parts.unshift(\"..\");\n              }\n            }\n            return parts;\n          }\n          exports.resolve = function () {\n            var resolvedPath = \"\",\n              resolvedAbsolute = false;\n            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n              var path = i >= 0 ? arguments[i] : process.cwd();\n              if (typeof path !== \"string\") {\n                throw new TypeError(\"Arguments to path.resolve must be strings\");\n              } else if (!path) {\n                continue;\n              }\n              resolvedPath = path + \"/\" + resolvedPath;\n              resolvedAbsolute = path.charAt(0) === \"/\";\n            }\n            resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n              return !!p;\n            }), !resolvedAbsolute).join(\"/\");\n            return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n          };\n          exports.normalize = function (path) {\n            var isAbsolute = exports.isAbsolute(path),\n              trailingSlash = substr(path, -1) === \"/\";\n            path = normalizeArray(filter(path.split(\"/\"), function (p) {\n              return !!p;\n            }), !isAbsolute).join(\"/\");\n            if (!path && !isAbsolute) {\n              path = \".\";\n            }\n            if (path && trailingSlash) {\n              path += \"/\";\n            }\n            return (isAbsolute ? \"/\" : \"\") + path;\n          };\n          exports.isAbsolute = function (path) {\n            return path.charAt(0) === \"/\";\n          };\n          exports.join = function () {\n            var paths = Array.prototype.slice.call(arguments, 0);\n            return exports.normalize(filter(paths, function (p, index) {\n              if (typeof p !== \"string\") {\n                throw new TypeError(\"Arguments to path.join must be strings\");\n              }\n              return p;\n            }).join(\"/\"));\n          };\n          exports.relative = function (from, to) {\n            from = exports.resolve(from).substr(1);\n            to = exports.resolve(to).substr(1);\n            function trim(arr) {\n              var start = 0;\n              for (; start < arr.length; start++) {\n                if (arr[start] !== \"\") break;\n              }\n              var end = arr.length - 1;\n              for (; end >= 0; end--) {\n                if (arr[end] !== \"\") break;\n              }\n              if (start > end) return [];\n              return arr.slice(start, end - start + 1);\n            }\n            var fromParts = trim(from.split(\"/\"));\n            var toParts = trim(to.split(\"/\"));\n            var length = Math.min(fromParts.length, toParts.length);\n            var samePartsLength = length;\n            for (var i = 0; i < length; i++) {\n              if (fromParts[i] !== toParts[i]) {\n                samePartsLength = i;\n                break;\n              }\n            }\n            var outputParts = [];\n            for (var i = samePartsLength; i < fromParts.length; i++) {\n              outputParts.push(\"..\");\n            }\n            outputParts = outputParts.concat(toParts.slice(samePartsLength));\n            return outputParts.join(\"/\");\n          };\n          exports.sep = \"/\";\n          exports.delimiter = \":\";\n          exports.dirname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            if (path.length === 0) return \".\";\n            var code = path.charCodeAt(0);\n            var hasRoot = code === 47;\n            var end = -1;\n            var matchedSlash = true;\n            for (var i = path.length - 1; i >= 1; --i) {\n              code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  end = i;\n                  break;\n                }\n              } else {\n                matchedSlash = false;\n              }\n            }\n            if (end === -1) return hasRoot ? \"/\" : \".\";\n            if (hasRoot && end === 1) {\n              return \"/\";\n            }\n            return path.slice(0, end);\n          };\n          function basename(path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var start = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var i;\n            for (i = path.length - 1; i >= 0; --i) {\n              if (path.charCodeAt(i) === 47) {\n                if (!matchedSlash) {\n                  start = i + 1;\n                  break;\n                }\n              } else if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n            }\n            if (end === -1) return \"\";\n            return path.slice(start, end);\n          }\n          exports.basename = function (path, ext) {\n            var f = basename(path);\n            if (ext && f.substr(-1 * ext.length) === ext) {\n              f = f.substr(0, f.length - ext.length);\n            }\n            return f;\n          };\n          exports.extname = function (path) {\n            if (typeof path !== \"string\") path = path + \"\";\n            var startDot = -1;\n            var startPart = 0;\n            var end = -1;\n            var matchedSlash = true;\n            var preDotState = 0;\n            for (var i = path.length - 1; i >= 0; --i) {\n              var code = path.charCodeAt(i);\n              if (code === 47) {\n                if (!matchedSlash) {\n                  startPart = i + 1;\n                  break;\n                }\n                continue;\n              }\n              if (end === -1) {\n                matchedSlash = false;\n                end = i + 1;\n              }\n              if (code === 46) {\n                if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n              } else if (startDot !== -1) {\n                preDotState = -1;\n              }\n            }\n            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n              return \"\";\n            }\n            return path.slice(startDot, end);\n          };\n          function filter(xs, f) {\n            if (xs.filter) return xs.filter(f);\n            var res = [];\n            for (var i = 0; i < xs.length; i++) {\n              if (f(xs[i], i, xs)) res.push(xs[i]);\n            }\n            return res;\n          }\n          var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n            return str.substr(start, len);\n          } : function (str, start, len) {\n            if (start < 0) start = str.length + start;\n            return str.substr(start, len);\n          };\n        }).call(this, require(\"_process\"));\n      }, {\n        _process: 5\n      }],\n      5: [function (require, module, exports) {\n        var process = module.exports = {};\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n        function defaultSetTimout() {\n          throw new Error(\"setTimeout has not been defined\");\n        }\n        function defaultClearTimeout() {\n          throw new Error(\"clearTimeout has not been defined\");\n        }\n        (function () {\n          try {\n            if (typeof setTimeout === \"function\") {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n          try {\n            if (typeof clearTimeout === \"function\") {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            return setTimeout(fun, 0);\n          }\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n          try {\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            return clearTimeout(marker);\n          }\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n          try {\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n          draining = false;\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n            queueIndex = -1;\n            len = queue.length;\n          }\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n          queue.push(new Item(fun, args));\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        };\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n        process.title = \"browser\";\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = \"\";\n        process.versions = {};\n        function noop() {}\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n        process.listeners = function (name) {\n          return [];\n        };\n        process.binding = function (name) {\n          throw new Error(\"process.binding is not supported\");\n        };\n        process.cwd = function () {\n          return \"/\";\n        };\n        process.chdir = function (dir) {\n          throw new Error(\"process.chdir is not supported\");\n        };\n        process.umask = function () {\n          return 0;\n        };\n      }, {}],\n      6: [function (require, module, exports) {\n        module.exports = {\n          name: \"ejs\",\n          description: \"Embedded JavaScript templates\",\n          keywords: [\"template\", \"engine\", \"ejs\"],\n          version: \"3.1.9\",\n          author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n          license: \"Apache-2.0\",\n          bin: {\n            ejs: \"./bin/cli.js\"\n          },\n          main: \"./lib/ejs.js\",\n          jsdelivr: \"ejs.min.js\",\n          unpkg: \"ejs.min.js\",\n          repository: {\n            type: \"git\",\n            url: \"git://github.com/mde/ejs.git\"\n          },\n          bugs: \"https://github.com/mde/ejs/issues\",\n          homepage: \"https://github.com/mde/ejs\",\n          dependencies: {\n            jake: \"^10.8.5\"\n          },\n          devDependencies: {\n            browserify: \"^16.5.1\",\n            eslint: \"^6.8.0\",\n            \"git-directory-deploy\": \"^1.5.1\",\n            jsdoc: \"^4.0.2\",\n            \"lru-cache\": \"^4.0.1\",\n            mocha: \"^10.2.0\",\n            \"uglify-js\": \"^3.3.16\"\n          },\n          engines: {\n            node: \">=0.10.0\"\n          },\n          scripts: {\n            test: \"npx jake test\"\n          }\n        };\n      }, {}]\n    }, {}, [1])(1);\n  });\n\n  var LayoutUtils = {\n    /**\r\n     * Проверка на объект\r\n     * @param value\r\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\r\n     * @returns {string}\r\n     * @private\r\n     */\n    hashCode: function hashCode() {\n      return this.crc32((new Date().getTime() + Math.random()).toString()).toString(16);\n    },\n    /**\r\n     * Hash crc32\r\n     * @param str\r\n     * @returns {number}\r\n     * @private\r\n     */\n    crc32: function crc32(str) {\n      for (var a, o = [], c = 0; c < 256; c++) {\n        a = c;\n        for (var f = 0; f < 8; f++) {\n          a = 1 & a ? 3988292384 ^ a >>> 1 : a >>> 1;\n        }\n        o[c] = a;\n      }\n      for (var n = -1, t = 0; t < str.length; t++) {\n        n = n >>> 8 ^ o[255 & (n ^ str.charCodeAt(t))];\n      }\n      return (-1 ^ n) >>> 0;\n    }\n  };\n\n  var LayoutPrivate = {\n    /**\r\n     * Выполнение события\r\n     * @param {object} layout\r\n     * @param {string} name\r\n     * @param {object|null} context\r\n     * @param {Array} params\r\n     * @private\r\n     */\n    trigger: function trigger(layout, name, context, params) {\n      params = params || [];\n      if (layout._events.hasOwnProperty(name) && layout._events[name].length > 0) {\n        for (var i = 0; i < layout._events[name].length; i++) {\n          var callback = layout._events[name][i].callback;\n          context = layout._events[name][i].context || context;\n          callback.apply(context, params);\n          if (layout._events[name][i].singleExec) {\n            layout._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\r\n     * Формирование контента\r\n     * @param {object} layout\r\n     * @param {*}      data\r\n     * @returns {Array}\r\n     * @private\r\n     */\n    renderContent: function renderContent(layout, data) {\n      var result = [];\n      if (typeof data === 'string') {\n        result.push(data);\n      } else if (data instanceof Object) {\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n        for (var i = 0; i < data.length; i++) {\n          if (typeof data[i] === 'string') {\n            result.push(data[i]);\n          } else if (data[i] instanceof Object && typeof data[i].render === 'function' && typeof data[i].initEvents === 'function') {\n            result.push(data[i].render());\n            layout.on('shown.coreui.layout', data[i].initEvents, data[i], true);\n          } else if (!Array.isArray(data[i]) && data[i].hasOwnProperty('component') && data[i].component.substring(0, 6) === 'coreui') {\n            var name = data[i].component.split('.')[1];\n            if (CoreUI.hasOwnProperty(name) && LayoutUtils.isObject(CoreUI[name])) {\n              var instance = CoreUI[name].create(data[i]);\n              result.push(instance.render());\n              layout.on('shown.coreui.layout', instance.initEvents, instance, true);\n            } else {\n              result.push(JSON.stringify(data[i]));\n            }\n          } else {\n            result.push(JSON.stringify(data[i]));\n          }\n        }\n      }\n      return result;\n    }\n  };\n\n  var tpl = Object.create(null);\n  tpl['loader.html'] = '<div class=\"coreui-layout-lock position-absolute w-100 top-0 start-0 bottom-0\"> <div class=\"coreui-layout-block bg-secondary-subtle position-absolute opacity-50 w-100 top-0 bottom-0\"></div> <div class=\"coreui-layout-message position-relative d-flex align-content-center justify-content-start gap-2 mt-3 py-1 px-2 m-auto border border-secondary-subtle rounded-3 bg-body-secondary shadow-sm\"> <div class=\"spinner-border text-secondary align-self-center\"></div> <span class=\"lh-lg\"><%= loading %></span> </div> </div>';\n\n  var LayoutInstance = /*#__PURE__*/function () {\n    /**\r\n     * Инициализация\r\n     * @param options\r\n     */\n    function LayoutInstance(options) {\n      _classCallCheck(this, LayoutInstance);\n      _defineProperty(this, \"_options\", {\n        id: '',\n        lang: 'en',\n        langList: {},\n        justify: \"start\",\n        // start, end, center, between, around, evenly\n        align: \"start\",\n        // start, end, center, baseline, stretch\n        direction: \"row\",\n        // column, column-reverse, row, row-reverse\n        wrap: \"wrap\",\n        // wrap, nowrap, reverse\n        overflow: null,\n        // auto, hidden, visible, scroll\n        overflowX: null,\n        // auto, hidden, visible, scroll\n        overflowY: null,\n        // auto, hidden, visible, scroll\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        height: null,\n        minHeight: null,\n        naxHeight: null,\n        gap: null,\n        items: [],\n        sizes: {}\n      });\n      _defineProperty(this, \"_item\", {\n        id: '',\n        align: null,\n        // start, end, center, baseline, stretch\n        order: null,\n        // 0 - 5\n        fill: false,\n        overflow: null,\n        // auto, hidden, visible, scroll\n        overflowX: null,\n        // auto, hidden, visible, scroll\n        overflowY: null,\n        // auto, hidden, visible, scroll\n        width: null,\n        minWidth: null,\n        maxWidth: null,\n        height: null,\n        minHeight: null,\n        naxHeight: null,\n        sizes: {}\n      });\n      _defineProperty(this, \"_id\", '');\n      _defineProperty(this, \"_events\", {});\n      this._options = $.extend(true, {}, this._options, options);\n      this._id = this._options.hasOwnProperty('id') && typeof this._options.id === 'string' && this._options.id ? this._options.id : LayoutUtils.hashCode();\n      var that = this;\n      this._options.items.map(function (item, key) {\n        if (LayoutUtils.isObject(item)) {\n          if (!item.hasOwnProperty('id') || typeof item.id !== 'string' || !item.id) {\n            that._options.items[key].id = LayoutUtils.hashCode();\n          }\n        }\n      });\n    }\n\n    /**\r\n     *\r\n     */\n    return _createClass(LayoutInstance, [{\n      key: \"initEvents\",\n      value: function initEvents() {\n        LayoutPrivate.trigger(this, 'shown.coreui.layout');\n      }\n\n      /**\r\n       *\r\n       * @returns {*}\r\n       */\n    }, {\n      key: \"getId\",\n      value: function getId() {\n        return this._id;\n      }\n\n      /**\r\n       * @param {string} itemId\r\n       * @param {*}      content\r\n       */\n    }, {\n      key: \"setItemContent\",\n      value: function setItemContent(itemId, content) {\n        var container = $('#coreui-layout-' + this.getId() + ' .item-' + itemId);\n        if (container[0]) {\n          var contents = LayoutPrivate.renderContent(this, content);\n          container.empty();\n          contents.map(function (content) {\n            container.append(content);\n          });\n          LayoutPrivate.trigger(this, 'show-content.coreui.layout', this, [itemId]);\n        } else {\n          this._options.items.map(function (item) {\n            if (LayoutUtils.isObject(item) && item.hasOwnProperty('id') && item.id === itemId) {\n              item.content = content;\n            }\n          });\n        }\n      }\n\n      /**\r\n       * @param {string} itemId\r\n       * @param {string} url\r\n       */\n    }, {\n      key: \"loadItemContent\",\n      value: function loadItemContent(itemId, url) {\n        var container = $('#coreui-layout-' + this.getId() + ' .item-' + itemId);\n        if (container[0]) {\n          var that = this;\n          this.lock(itemId);\n          $.ajax({\n            url: url,\n            method: 'get',\n            success: function success(result) {\n              that.setItemContent(itemId, result);\n            },\n            error: function error(xhr, textStatus, errorThrown) {\n              that.setItemContent(itemId, '');\n            },\n            complete: function complete(xhr, textStatus) {\n              that.unlock(itemId);\n            }\n          });\n        }\n      }\n\n      /**\r\n       * Блокировка панели\r\n       * @param {string} itemId\r\n       * @param {string} text\r\n       */\n    }, {\n      key: \"lock\",\n      value: function lock(itemId, text) {\n        var container = $('#coreui-layout-' + this.getId() + ' .item-' + itemId);\n        if (container[0] && !container.find('.coreui-layout-lock')[0]) {\n          var html = ejs.render(tpl['loader.html'], {\n            loading: typeof text === 'string' ? text : this.getLang().loading\n          });\n          container.prepend(html);\n        }\n      }\n\n      /**\r\n       * Разблокировка панели\r\n       * @param {string} itemId\r\n       */\n    }, {\n      key: \"unlock\",\n      value: function unlock(itemId) {\n        var container = $('#coreui-layout-' + this._id + ' .item-' + itemId + ' > .coreui-layout-lock');\n        if (container[0]) {\n          container.hide(50, function () {\n            $(this).remove();\n          });\n        }\n      }\n\n      /**\r\n       * Получение переводов текущего языка\r\n       * @return {object}\r\n       */\n    }, {\n      key: \"getLang\",\n      value: function getLang() {\n        return $.extend(true, {}, this._options.langList);\n      }\n\n      /**\r\n       *\r\n       * @param element\r\n       * @returns {*}\r\n       */\n    }, {\n      key: \"render\",\n      value: function render(element) {\n        var containerClasses = [];\n        var containerStyles = [];\n        var containerItems = [];\n        switch (this._options.direction) {\n          case 'row':\n            containerClasses.push('flex-row');\n            break;\n          case 'row-reverse':\n            containerClasses.push('flex-row-reverse');\n            break;\n          case 'column':\n            containerClasses.push('flex-column');\n            break;\n          case 'column-reverse':\n            containerClasses.push('flex-column-reverse');\n            break;\n        }\n        switch (this._options.justify) {\n          case 'start':\n            containerClasses.push('justify-content-start');\n            break;\n          case 'end':\n            containerClasses.push('justify-content-end');\n            break;\n          case 'center':\n            containerClasses.push('justify-content-center');\n            break;\n          case 'between':\n            containerClasses.push('justify-content-between');\n            break;\n          case 'around':\n            containerClasses.push('justify-content-around');\n            break;\n          case 'evenly':\n            containerClasses.push('justify-content-evenly');\n            break;\n        }\n        switch (this._options.align) {\n          case 'start':\n            containerClasses.push('align-items-start');\n            break;\n          case 'end':\n            containerClasses.push('align-items-end');\n            break;\n          case 'center':\n            containerClasses.push('align-items-center');\n            break;\n          case 'baseline':\n            containerClasses.push('align-items-baseline');\n            break;\n          case 'stretch':\n            containerClasses.push('align-items-stretch');\n            break;\n        }\n        switch (this._options.wrap) {\n          case 'wrap':\n            containerClasses.push('flex-wrap');\n            break;\n          case 'wrap-reverse':\n            containerClasses.push('flex-wrap-reverse');\n            break;\n          case 'nowrap':\n            containerClasses.push('flex-nowrap');\n            break;\n        }\n        switch (this._options.overflow) {\n          case 'auto':\n            containerClasses.push('overflow-auto');\n            break;\n          case 'hidden':\n            containerClasses.push('overflow-hidden');\n            break;\n          case 'visible':\n            containerClasses.push('overflow-visible');\n            break;\n          case 'scroll':\n            containerClasses.push('overflow-scroll');\n            break;\n        }\n        switch (this._options.overflowX) {\n          case 'auto':\n            containerClasses.push('overflow-x-auto');\n            break;\n          case 'hidden':\n            containerClasses.push('overflow-x-hidden');\n            break;\n          case 'visible':\n            containerClasses.push('overflow-x-visible');\n            break;\n          case 'scroll':\n            containerClasses.push('overflow-x-scroll');\n            break;\n        }\n        switch (this._options.overflowY) {\n          case 'auto':\n            containerClasses.push('overflow-y-auto');\n            break;\n          case 'hidden':\n            containerClasses.push('overflow-y-hidden');\n            break;\n          case 'visible':\n            containerClasses.push('overflow-y-visible');\n            break;\n          case 'scroll':\n            containerClasses.push('overflow-y-scroll');\n            break;\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.width)) >= 0) {\n          var unit = typeof this._options.width === 'number' ? 'px' : '';\n          containerStyles.push('width:' + this._options.width + unit);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.minWidth)) >= 0) {\n          var _unit = typeof this._options.minWidth === 'number' ? 'px' : '';\n          containerStyles.push('min-width:' + this._options.minWidth + _unit);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.maxWidth)) >= 0) {\n          var _unit2 = typeof this._options.maxWidth === 'number' ? 'px' : '';\n          containerStyles.push('max-width:' + this._options.maxWidth + _unit2);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.height)) >= 0) {\n          var _unit3 = typeof this._options.height === 'number' ? 'px' : '';\n          containerStyles.push('height:' + this._options.height + _unit3);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.minHeight)) >= 0) {\n          var _unit4 = typeof this._options.minHeight === 'number' ? 'px' : '';\n          containerStyles.push('min-height:' + this._options.minHeight + _unit4);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.maxHeight)) >= 0) {\n          var _unit5 = typeof this._options.maxHeight === 'number' ? 'px' : '';\n          containerStyles.push('max-height:' + this._options.maxHeight + _unit5);\n        }\n        if (['number', 'string'].indexOf(_typeof(this._options.gap)) >= 0) {\n          var _unit6 = typeof this._options.gap === 'number' ? 'px' : '';\n          containerStyles.push('gap:' + this._options.gap + _unit6);\n        }\n        $.each(this._options.sizes, function (name, size) {\n          if (['sm', 'md', 'lg', 'xl', 'xxl'].indexOf(name) >= 0) {\n            switch (size.direction) {\n              case 'row':\n                containerClasses.push('flex-' + name + '-row');\n                break;\n              case 'row-reverse':\n                containerClasses.push('flex-' + name + '-row-reverse');\n                break;\n              case 'column':\n                containerClasses.push('flex-' + name + '-column');\n                break;\n              case 'column-reverse':\n                containerClasses.push('flex-' + name + '-column-reverse');\n                break;\n            }\n            switch (size.justify) {\n              case 'start':\n                containerClasses.push('justify-content-' + name + '-start');\n                break;\n              case 'end':\n                containerClasses.push('justify-content-' + name + '-end');\n                break;\n              case 'center':\n                containerClasses.push('justify-content-' + name + '-center');\n                break;\n              case 'between':\n                containerClasses.push('justify-content-' + name + '-between');\n                break;\n              case 'around':\n                containerClasses.push('justify-content-' + name + '-around');\n                break;\n              case 'evenly':\n                containerClasses.push('justify-content-' + name + '-evenly');\n                break;\n            }\n            switch (size.align) {\n              case 'start':\n                containerClasses.push('align-items-' + name + '-start');\n                break;\n              case 'end':\n                containerClasses.push('align-items-' + name + '-end');\n                break;\n              case 'center':\n                containerClasses.push('align-items-' + name + '-center');\n                break;\n              case 'baseline':\n                containerClasses.push('align-items-' + name + '-baseline');\n                break;\n              case 'stretch':\n                containerClasses.push('align-items-' + name + '-stretch');\n                break;\n            }\n            switch (size.wrap) {\n              case 'wrap':\n                containerClasses.push('flex-' + name + '-wrap');\n                break;\n              case 'wrap-reverse':\n                containerClasses.push('flex-' + name + '-wrap-reverse');\n                break;\n              case 'nowrap':\n                containerClasses.push('flex-' + name + '-nowrap');\n                break;\n            }\n          }\n        });\n        var that = this;\n        var issetColumns = false;\n        $.each(this._options.items, function (key, item) {\n          var itemClasses = ['coreui-layout-item', 'item-' + item.id];\n          var itemStyles = [];\n          var issetItemColumn = false;\n          switch (item.align) {\n            case 'start':\n              itemClasses.push('align-self-start');\n              break;\n            case 'end':\n              itemClasses.push('align-self-end');\n              break;\n            case 'center':\n              itemClasses.push('align-self-center');\n              break;\n            case 'baseline':\n              itemClasses.push('align-self-baseline');\n              break;\n            case 'stretch':\n              itemClasses.push('align-self-stretch');\n              break;\n          }\n          switch (item.overflow) {\n            case 'auto':\n              itemClasses.push('overflow-auto');\n              break;\n            case 'hidden':\n              itemClasses.push('overflow-hidden');\n              break;\n            case 'visible':\n              itemClasses.push('overflow-visible');\n              break;\n            case 'scroll':\n              itemClasses.push('overflow-scroll');\n              break;\n          }\n          switch (item.overflowX) {\n            case 'auto':\n              itemClasses.push('overflow-x-auto');\n              break;\n            case 'hidden':\n              itemClasses.push('overflow-x-hidden');\n              break;\n            case 'visible':\n              itemClasses.push('overflow-x-visible');\n              break;\n            case 'scroll':\n              itemClasses.push('overflow-x-scroll');\n              break;\n          }\n          switch (item.overflowY) {\n            case 'auto':\n              itemClasses.push('overflow-y-auto');\n              break;\n            case 'hidden':\n              itemClasses.push('overflow-y-hidden');\n              break;\n            case 'visible':\n              itemClasses.push('overflow-y-visible');\n              break;\n            case 'scroll':\n              itemClasses.push('overflow-y-scroll');\n              break;\n          }\n          if (item.fill) {\n            itemClasses.push('flex-fill');\n          }\n          if (typeof item.order === 'number') {\n            if (item.order < 0) {\n              itemClasses.push('order-0');\n            } else if (item.order > 5) {\n              itemClasses.push('order-5');\n            } else {\n              itemClasses.push('order-' + item.order);\n            }\n          }\n          if (item.widthColumn) {\n            issetColumns = true;\n            issetItemColumn = true;\n            itemClasses.push('col-' + item.widthColumn);\n          }\n          $.each(item.sizes, function (name, size) {\n            if (['sm', 'md', 'lg', 'xl', 'xxl'].indexOf(name) >= 0) {\n              switch (size.align) {\n                case 'start':\n                  itemClasses.push('align-self-' + name + '-start');\n                  break;\n                case 'end':\n                  itemClasses.push('align-self-' + name + '-end');\n                  break;\n                case 'center':\n                  itemClasses.push('align-self-' + name + '-center');\n                  break;\n                case 'baseline':\n                  itemClasses.push('align-self-' + name + '-baseline');\n                  break;\n                case 'stretch':\n                  itemClasses.push('align-self-' + name + '-stretch');\n                  break;\n              }\n              if (size.fill) {\n                itemClasses.push('flex-' + name + '-fill');\n              }\n              if (size.widthColumn) {\n                issetColumns = true;\n                issetItemColumn = true;\n                itemClasses.push('col-' + name + '-' + size.widthColumn);\n              }\n              if (typeof size.order === 'number') {\n                if (size.order < 0) {\n                  itemClasses.push('order-' + name + '-0');\n                } else if (size.order > 5) {\n                  itemClasses.push('order-' + name + '-5');\n                } else {\n                  itemClasses.push('order-' + name + '-' + size.order);\n                }\n              }\n            }\n          });\n          if (item.width !== undefined) {\n            var _unit7 = typeof item.width === 'number' ? 'px' : '';\n            itemStyles.push('width:' + item.width + _unit7);\n          }\n          if (item.minWidth !== undefined) {\n            var _unit8 = typeof item.minWidth === 'number' ? 'px' : '';\n            itemStyles.push('min-width:' + item.minWidth + _unit8);\n          }\n          if (item.maxWidth !== undefined) {\n            var _unit9 = typeof item.maxWidth === 'number' ? 'px' : '';\n            itemStyles.push('max-width:' + item.maxWidth + _unit9);\n          }\n          if (item.height !== undefined) {\n            var _unit10 = typeof item.height === 'number' ? 'px' : '';\n            itemStyles.push('height:' + item.height + _unit10);\n          }\n          if (item.minHeight) {\n            var _unit11 = typeof item.minHeight === 'number' ? 'px' : '';\n            itemStyles.push('min-height:' + item.minHeight + _unit11);\n          }\n          if (item.maxHeight !== undefined) {\n            var _unit12 = typeof item.maxHeight === 'number' ? 'px' : '';\n            itemStyles.push('max-height:' + item.maxHeight + _unit12);\n          }\n          if (issetItemColumn) {\n            itemClasses.push('col');\n          }\n          var contents = LayoutPrivate.renderContent(that, item.content);\n          var styles = itemStyles.length > 0 ? ' style=\"' + itemStyles.join(';') + '\"' : '';\n          var itemContent = $('<div class=\"' + itemClasses.join(' ') + '\"' + styles + '></div>');\n          $.each(contents, function (name, content) {\n            itemContent.append(content);\n          });\n          containerItems.push(itemContent);\n        });\n        if (issetColumns) {\n          containerClasses.push('row');\n        }\n        var styles = containerStyles.length > 0 ? ' style=\"' + containerStyles.join(';') + '\"' : '';\n        var html = $('<div id=\"coreui-layout-' + this.getId() + '\" ' + 'class=\"coreui-layout d-flex ' + containerClasses.join(' ') + '\"' + styles + '></div>');\n        containerItems.map(function (containerItem) {\n          html.append(containerItem);\n        });\n        if (element === undefined) {\n          return html;\n        }\n\n        // Dom element\n        var domElement = {};\n        if (typeof element === 'string') {\n          domElement = document.getElementById(element);\n          if (!domElement) {\n            return '';\n          }\n        } else if (element instanceof HTMLElement) {\n          domElement = element;\n        }\n        $(domElement).html(html);\n        this.initEvents();\n      }\n\n      /**\r\n       * @param eventName\r\n       * @param callback\r\n       * @param context\r\n       * @param singleExec\r\n       */\n    }, {\n      key: \"on\",\n      value: function on(eventName, callback, context, singleExec) {\n        if (_typeof(this._events[eventName]) !== 'object') {\n          this._events[eventName] = [];\n        }\n        this._events[eventName].push({\n          context: context || this,\n          callback: callback,\n          singleExec: !!singleExec\n        });\n      }\n    }]);\n  }();\n\n  var Layout = {\n    lang: {},\n    _instances: {},\n    _settings: {\n      lang: 'en'\n    },\n    /**\r\n     * @param {object} options\r\n     * @returns {LayoutInstance}\r\n     */\n    create: function create(options) {\n      if (!options.hasOwnProperty('lang')) {\n        options.lang = this.getSetting('lang');\n      }\n      var langList = this.lang.hasOwnProperty(options.lang) ? this.lang[options.lang] : {};\n      options.langList = options.hasOwnProperty('langList') && LayoutUtils.isObject(options.langList) ? $.extend(true, {}, langList, options.langList) : langList;\n      var instance = new LayoutInstance(LayoutUtils.isObject(options) ? options : {});\n      var layoutId = instance.getId();\n      this._instances[layoutId] = instance;\n      return instance;\n    },\n    /**\r\n     * @param {string} id\r\n     * @returns {object|null}\r\n     */\n    get: function get(id) {\n      if (!this._instances.hasOwnProperty(id)) {\n        return null;\n      }\n      if (!$('#coreui-layout-' + id)[0]) {\n        delete this._instances[id];\n        return null;\n      }\n      return this._instances[id];\n    },\n    /**\r\n     * Установка настроек\r\n     * @param {object} settings\r\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend(true, {}, this._settings, settings);\n    },\n    /**\r\n     * Получение значения настройки\r\n     * @param {string} name\r\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  var langEn = {\n    \"loading\": \"Loading...\"\n  };\n\n  var langRu = {\n    \"loading\": \"Загрузка...\"\n  };\n\n  Layout.lang.en = langEn;\n  Layout.lang.ru = langRu;\n\n  return Layout;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["global","factory","exports","module","define","amd","globalThis","self","CoreUI","layout","this","_toPropertyKey","t","i","r","e","Symbol","toPrimitive","String","Number","call","TypeError","_typeof","o","iterator","constructor","prototype","_defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_defineProperty","obj","value","f","window","ejs","n","c","require","u","a","Error","code","p","1","fs","path","utils","scopeOptionWarned","_VERSION_STRING","version","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","concat","_BOM","_JS_IDENTIFIER","resolvePaths","name","paths","filePath","some","v","resolveInclude","existsSync","handleCache","options","template","func","filename","hasTemplate","arguments","cache","get","fileLoader","toString","replace","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","match","exec","Array","isArray","root","includer","escapeFunction","includerResult","rethrow","err","str","flnm","lineno","esc","lines","split","start","Math","max","end","min","context","slice","map","line","curr","join","message","stripSemi","Template","text","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","source","client","escape","escapeXML","compileDebug","debug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","async","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","Promise","isDir","dirname","extname","resolve","scope","console","warn","render","d","data","shallowCopyFromList","renderFile","cb","result","args","shift","pop","settings","viewOpts","reject","clearCache","reset","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","open","close","RegExp","fn","prepended","appended","escapeFn","sanitizedFilename","JSON","stringify","generateSource","test","destructuring","src","log","ctor","SyntaxError","returnedFn","apply","includeData","basename","matches","parseTemplateText","forEach","index","indexOf","closing","scanLine","firstPos","pat","arr","push","substring","_addOutput","newLineCount","lastIndexOf","__express","VERSION","../package.json","./utils","2","hasOwn","hasOwnProperty","regExpChars","_ENCODE_HTML_RULES","string","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","undefined","to","from","list","_data","val","remove","hyphenToCamel","toUpperCase","create","__proto__","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","filter","xs","res","resolvedPath","resolvedAbsolute","cwd","charAt","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","charCodeAt","matchedSlash","ext","startDot","startPart","preDotState","len","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","runClearTimeout","marker","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","description","keywords","author","license","bin","main","jsdelivr","unpkg","repository","type","url","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","LayoutUtils","isObject","hashCode","crc32","Date","getTime","random","LayoutPrivate","params","_events","callback","singleExec","instance","initEvents","component","tpl","LayoutInstance","id","lang","langList","justify","align","direction","wrap","overflow","overflowX","overflowY","width","minWidth","maxWidth","height","minHeight","naxHeight","gap","items","sizes","order","fill","_options","$","extend","_id","that","item","Constructor","protoProps","itemId","content","contents","container","getId","empty","append","lock","ajax","method","success","setItemContent","error","xhr","textStatus","errorThrown","complete","unlock","find","html","loading","getLang","prepend","hide","element","containerClasses","containerStyles","containerItems","unit","_unit","_unit2","_unit3","_unit4","maxHeight","_unit5","_unit6","each","size","issetColumns","styles","itemClasses","itemStyles","issetItemColumn","widthColumn","_unit7","_unit8","_unit9","_unit10","_unit11","_unit12","itemContent","containerItem","domElement","document","getElementById","HTMLElement","eventName","staticProps","Layout","_instances","_settings","getSetting","layoutId","setSettings","en","ru"],"mappings":"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"}